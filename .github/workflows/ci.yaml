name: CI Pipeline

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python '3.12' and install Dependencies
        uses: actions/setup-python@v5
        id: setup_python
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Restore cached virtualenv
        uses: actions/cache/save@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements-ci.txt') }}
          path: .venv
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          python -m pip install -r requirements-ci.txt
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
      - name: Saved cached virtualenv
        uses: actions/cache/save@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements-ci.txt') }}
          path: .venv
      - name: Run linter to check code for programmatic and stylistic errors
        run: make lint
      - name: Check code formatting
        run: make format-check
      - name: Run unit tests and generate code-coverage report
        run: make test-coverage
      - name: Upload code-coverage report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-iris-classifier-project


  # setup:
  #   name: Setup Python and Install Dependencies
  #   runs-on: ubuntu-latest

  #   outputs:
  #     python-version: ${{ steps.set-python.outputs.python-version }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'
  #     - name: Cache pip packages
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-

  #     - name: Install system dependencies
  #       run: sudo apt-get update && sudo apt-get install -y make

  #     - name: Create virtualenv and install dependencies
  #       run: .venv/bin/make env

  # lint:
  #   name: Lint with Ruff
  #   runs-on: ubuntu-latest
  #   needs: setup

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install system dependencies
  #       run: sudo apt-get update && sudo apt-get install -y make

  #    - name: Create virtualenv and install dependencies
  #       run: .venv/bin/make env

  #     - name: Lint
  #       run: .venv/bin/make lint

  # format:
  #   name: Check code formatting
  #   runs-on: ubuntu-latest
  #   needs: setup

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install system dependencies
  #       run: sudo apt-get update && sudo apt-get install -y make

  #     - name: Create virtualenv and install dependencies
  #       run: .venv/bin/make env

  #     - name: Format check
  #       run: .venv/bin/make format-check

  # test:
  #   name: Run tests + upload coverage
  #   runs-on: ubuntu-latest
  #   needs: setup

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install system dependencies
  #       run: sudo apt-get update && sudo apt-get install -y make

  #     - name: Create virtualenv and install dependencies
  #       run: .venv/bin/make env

  #     - name: Run tests with coverage
  #       run: .venv/bin/make test-coverage

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: ./coverage.xml
  #         flags: unittests
  #         name: codecov-iris-classifier-project